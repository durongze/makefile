cmake_minimum_required(VERSION 3.15)
project (libusb)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

#configure_file( "${CMAKE_CURRENT_LIST_DIR}/config.h.in"    "${CMAKE_CURRENT_LIST_DIR}/config.h"  )

set(LIBUSB_TOP_DIR ${CMAKE_CURRENT_LIST_DIR})
set(LIBUSB_INC_DIR ${LIBUSB_TOP_DIR}/    ${LIBUSB_TOP_DIR}/libusb    ${LIBUSB_TOP_DIR}/libusb/os)

file(GLOB LibUsbSRCS   RELATIVE ${LIBUSB_TOP_DIR}    libusb/*.c*    libusb/os/*linux*.c*    libusb/os/*posix*.c* )
file(GLOB LibUsbHDRS   RELATIVE ${LIBUSB_TOP_DIR}    libusb/*.h*    libusb/os/*linux*.h*    libusb/os/*posix*.h* )

set (LIBUSB_HDRS  ${LibUsbHDRS})

set(ALL_FILES
    ${LibUsbSRCS}  ${LibUsbHDRS}
)

list(REMOVE_ITEM ALL_FILES           libusb/xxxxx.c )

message("[INFO] LIBUSB_INC_DIR ${LIBUSB_INC_DIR}")

#list(REMOVE_ITEM LibUsbSRCS   xxx.c)
set(LIBUSB_STATIC libusb_static)
add_library               (${LIBUSB_STATIC} STATIC  ${ALL_FILES}       )
target_include_directories(${LIBUSB_STATIC} PRIVATE ${LIBUSB_INC_DIR}   ${ZLIB_INCLUDE_DIRS})
target_link_directories   (${LIBUSB_STATIC} PRIVATE ${LIBUSB_SRC_DIR}/  ${ZLIB_LIBRARY_DIRS})
target_compile_definitions(${LIBUSB_STATIC} PRIVATE
	DYZ
)

set(LIBUSB_SHARED libusb_shared)
add_library               (${LIBUSB_SHARED} SHARED  ${ALL_FILES})
target_include_directories(${LIBUSB_SHARED} PRIVATE ${LIBUSB_INC_DIR}   ${ZLIB_INCLUDE_DIRS} )
target_link_directories   (${LIBUSB_SHARED} PRIVATE ${LIBUSB_SRC_DIR}/  ${ZLIB_LIBRARY_DIRS} )
target_link_libraries     (${LIBUSB_SHARED} PRIVATE                     ${ZLIB_LIBRARIES}    )
target_compile_definitions(${LIBUSB_SHARED} PRIVATE
	DYZ
)


SET(install_targets ${LIBUSB_STATIC}    )
SET(install_hdr_dir include)

set_target_properties(${LIBUSB_STATIC} PROPERTIES PUBLIC_HEADER "${LIBUSB_HDRS}")

INSTALL(TARGETS ${install_targets}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        PUBLIC_HEADER DESTINATION ${install_hdr_dir}
       )

install(FILES      ${LIBUSB_HDRS} DESTINATION ${install_hdr_dir})
install(DIRECTORY  "inc_sub_dir"  DESTINATION ${install_hdr_dir} FILES_MATCHING PATTERN "*.h")