cmake_minimum_required(VERSION 3.15)
project (vmrp)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(SKY_SDK_DIR $ENV{SkySdkDir})

#set(TOP_DIR ${CMAKE_CURRENT_LIST_DIR})
#set(TOP_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(TOP_DIR ${PROJECT_SOURCE_DIR})

#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall -DNETWORK_SUPPORT -DVMRP")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -DNETWORK_SUPPORT -DVMRP")

if(DYZ_DBG)
    set(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS}    -DDYZ_DBG")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -DDYZ_DBG")
endif()

#add_definitions(-D DEBUG)

add_definitions(-D SCREEN_SIZE_240320)

#add_definitions(-D _VS2005_)

#capstone.lib     pthreadvc2_static.lib       SDL2-staticd.lib
#SDL2maind.lib    unicorn.lib                 zlibstaticd.lib

include(cmake/dep_3rdlib_files.cmake)

gen_dep_lib_dir(all_dep_lib_dir )

set(dep_libs ${DepLibs})

if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99") 
    set(dep_libs -Wl,-Bstatic capstone SDL2main SDL2 z )
    #set(dep_libs ${dep_libs} x86_64-softmmu  arm-softmmu  aarch64-softmmu  m68k-softmmu )
    #set(dep_libs ${dep_libs} mips-softmmu  mipsel-softmmu  mips64-softmmu  mips64el-softmmu ) 
    #set(dep_libs ${dep_libs} sparc-softmmu  sparc64-softmmu  ppc-softmmu  ppc64-softmmu )
    #set(dep_libs ${dep_libs} riscv32-softmmu  riscv64-softmmu  s390x-softmmu  tricore-softmmu unicorn-common)
    set(dep_libs ${dep_libs} unicorn)
    set(dep_libs ${dep_libs} -Wl,-Bdynamic -ldl -lm -lpthread -lrt)
elseif(CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99") 

    #include(cmake/dep_pthread_win32.cmake)
    #set(dep_libs  capstone unicorn_static  SDL2main SDL2-static zlibstatic pthreadvc2_shared)
    set(dep_libs ${dep_libs}  ws2_32.lib Winmm.lib imm32.lib version.lib Setupapi.lib)
    #list(REMOVE_ITEM dep_libs unicorn_static SDL2-static zlibstatic )
else()
    message("[ERROR] current platform: unkonw ")
endif()

file(GLOB MrpMain_SRCS RELATIVE ${TOP_DIR} ./main.c)

file(GLOB MrpLib_SRCS RELATIVE ${TOP_DIR} ./src/*.c ./header/*.h)
#list(REMOVE_ITEM MrpLib_SRCS ${MrpMain_SRCS} )

#add_library(libvmrp SHARED ${MrpLib_SRCS})
#target_link_libraries(libvmrp ${dep_libs} )

message("[INFO] DepLibs: ${dep_libs}")

add_executable(vmrp_main ${MrpMain_SRCS} ${MrpLib_SRCS} )
target_compile_definitions(vmrp_main PRIVATE  -DNETWORK_SUPPORT -DVMRP)
target_include_directories(vmrp_main PRIVATE ${TOP_DIR}/)
target_include_directories(vmrp_main PRIVATE ${TOP_DIR}/header)
target_link_libraries(vmrp_main ${dep_libs} )

source_group(TREE ${TOP_DIR} FILES ${MrpMain_SRCS} ${MrpLib_SRCS} )

set(MYTH_TOP_DIR ${CMAKE_CURRENT_LIST_DIR})

file(GLOB cfunc_main_SRCS RELATIVE ${MYTH_TOP_DIR}/ ./mythroad/build/*.c*)
file(GLOB cfunc_lua_SRCS RELATIVE  ${MYTH_TOP_DIR}/ ./mythroad/luadec/*.c*)
file(GLOB cfunc_oslib_SRCS RELATIVE  ${MYTH_TOP_DIR}/ ./mythroad/oslib/*.c*)
file(GLOB cfunc_myth_SRCS RELATIVE  ${MYTH_TOP_DIR}/ ./mythroad/src/*.c* ./mythroad/*.c*)

set(cfunc_SRCS ${cfunc_main_SRCS} ${cfunc_lua_SRCS}  ${cfunc_oslib_SRCS} ${cfunc_myth_SRCS} )

list(REMOVE_ITEM cfunc_SRCS mythroad/mythroad_mini.c mythroad/build/main.c)

message ("cfunc_SRCS : ${cfunc_SRCS} ")

source_group(TREE ${MYTH_TOP_DIR} FILES ${cfunc_SRCS})

add_library(MYTH SHARED ${cfunc_SRCS} )
target_compile_definitions(MYTH PRIVATE  -DNETWORK_SUPPORT)
target_include_directories(MYTH PRIVATE ${MYTH_TOP_DIR}/mythroad/)
target_include_directories(MYTH PRIVATE ${MYTH_TOP_DIR}/mythroad/include)

function(generate_fcopy src_f dest_dir)
    add_custom_command(OUTPUT ${dest_dir}
                       COMMAND "${CMAKE_COMMAND}" -E remove "${dest_dir}"
                       COMMAND "${CMAKE_COMMAND}" -E copy "${src_f}" "${dest_dir}"
                       DEPENDS "${src_f}"
                       COMMENT "${CMAKE_COMMAND} -E copy ${src_f} ${dest_dir}" VERBATIM)
endfunction()

function(generate_dcopy src_d dest_dir)
    add_custom_command(OUTPUT ${dest_dir}
                       COMMAND "${CMAKE_COMMAND}" -E remove_directory "${dest_dir}"
                       COMMAND "${CMAKE_COMMAND}" -E copy_directory "${src_d}" "${dest_dir}"
                       DEPENDS "${src_d}"
                       COMMENT "${CMAKE_COMMAND} -E copy_directory ${src_d} ${dest_dir}" VERBATIM)
endfunction()

generate_fcopy(${TOP_DIR}/wasm/dist/fs/cfunction.ext  ${CMAKE_CURRENT_BINARY_DIR}/cfunction.ext)
generate_dcopy(${TOP_DIR}/wasm/dist/fs/mythroad   ${CMAKE_CURRENT_BINARY_DIR}/mythroad)

#execute_process( COMMAND ${CMAKE_COMMAND} -E copy_directory ${TOP_DIR}/wasm/dist/fs/mythroad ${CMAKE_CURRENT_BINARY_DIR}/mythroad)

add_custom_target(dep_mythroad_dir ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/mythroad ${CMAKE_CURRENT_BINARY_DIR}/cfunction.ext)


