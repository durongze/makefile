CMAKE_MINIMUM_REQUIRED(VERSION 3.16)

PROJECT(usbview)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)


set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH "Where to install output files")
#set(CMAKE_DEBUG_POSTFIX d)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

configure_file(config.h.in config.h)

set(PROJ_SRC_H "")
set(PROJ_SRC_CPP "")

file(GLOB_RECURSE src_h
    LIST_DIRECTORIES false
    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/
    "${CMAKE_CURRENT_SOURCE_DIR}/*.h"
)

foreach(src ${src_h})
    set(src_path_absolute ${CMAKE_CURRENT_SOURCE_DIR}/${src})
    get_filename_component(src_path "${src}" PATH)
    string(REPLACE "/" "\\" src_path_msvc "${src_path}")
    list(APPEND PROJ_SRC_H ${src_path_absolute})
    source_group("${src_path_msvc}" FILES "${src_path_absolute}")
endforeach()

file(GLOB_RECURSE src_cpp
    LIST_DIRECTORIES false
    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/
    "${CMAKE_CURRENT_SOURCE_DIR}/*.c"
)

foreach(src ${src_cpp})
    set(src_path_absolute ${CMAKE_CURRENT_SOURCE_DIR}/${src})
    get_filename_component(src_path "${src}" PATH)
    string(REPLACE "/" "\\" src_path_msvc "${src_path}")
    list(APPEND PROJ_SRC_CPP ${src_path_absolute})
    source_group("${src_path_msvc}" FILES "${src_path_absolute}")
endforeach()

set(GTK_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/libgtk)
set(GTK_LIBS atk-1.0 cairo fontconfig gailutil gdk-win32-3.0 gdk_pixbuf-2.0 gio-2.0  glib-2.0 gmodule-2.0 gobject-2.0 gthread-2.0 gtk-win32-3.0 pango-1.0 pangocairo-1.0 pangoft2-1.0 pangowin32-1.0)

add_executable(${PROJECT_NAME} ${PROJ_SRC_H} ${PROJ_SRC_CPP})
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ ${CMAKE_CURRENT_BINARY_DIR}/  ${GTK_DIR}/include ${GTK_DIR}/include/libxml2/libxml  ${GTK_DIR}/lib/glib-2.0/include)
target_link_directories(${PROJECT_NAME} PRIVATE ${GTK_DIR}/lib)
target_link_libraries(${PROJECT_NAME} PRIVATE ${GTK_LIBS})

set(UsbView_SRC_CPP "${PROJ_SRC_CPP}")
list(REMOVE_ITEM UsbView_SRC_CPP "${CMAKE_CURRENT_SOURCE_DIR}/main.c" )

message( "UsbView_SRC_CPP : ${UsbView_SRC_CPP}")

add_library(usbview_static STATIC ${UsbView_SRC_CPP})
set_target_properties(usbview_static PROPERTIES OUTPUT_NAME "usbview_static")
#set_target_properties(usbview_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
target_include_directories(usbview_static PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/ ${CMAKE_CURRENT_BINARY_DIR}/ ${GTK_DIR}/include)


function(gen_dep_lib_dir dep_lib_dir)
	if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
		message("current platform: Linux ")
		set(ALL_LIB_HOME_DIR "$ENV{HOME}/opt/")
		EXECUTE_PROCESS(COMMAND ls ${ALL_LIB_HOME_DIR}
			TIMEOUT 5
			OUTPUT_VARIABLE ALL_LIB_DIR_LIST
			OUTPUT_STRIP_TRAILING_WHITESPACE
			)
	elseif(CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
		message("current platform: Windows ")
		set(ALL_LIB_HOME_DIR "E:\\code\\usbview-1.0\\third_party\\libgtk\\include")
		EXECUTE_PROCESS(COMMAND cmd /c dir /ad /b ${ALL_LIB_HOME_DIR}
			OUTPUT_VARIABLE ALL_LIB_DIR_LIST
			OUTPUT_STRIP_TRAILING_WHITESPACE
			)
	else()
		message("current platform: unkonw ") 
	endif()
	set(dep_lib_dir ${ALL_LIB_DIR_LIST})
	add_dep_lib_dir("${dep_lib_dir}")
endfunction()

function(add_dep_lib_dir dep_lib)
	message("dep_lib: ${dep_lib} ")
	string(REPLACE "\n" ";" LIB_DIR_LIST "${ALL_LIB_DIR_LIST}")
	message("LIB_DIR_LIST: ${LIB_DIR_LIST} ") 
	foreach(LIB_DIR ${LIB_DIR_LIST})
		include_directories(${ALL_LIB_HOME_DIR}/${LIB_DIR}/)
		include_directories(${ALL_LIB_HOME_DIR}/${LIB_DIR}/include)
		link_directories(${ALL_LIB_HOME_DIR}/${LIB_DIR}/lib64)
		message("[INFO] ${ALL_LIB_HOME_DIR}/${LIB_DIR}/lib64")
	endforeach()
endfunction()

gen_dep_lib_dir(dep_lib_dir)
